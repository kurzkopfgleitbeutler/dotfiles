#+title: literate emacs init
#+options: num:nil
#+property: header-args :noweb yes :mkdirp yes :results silent

There are three ways to personalize Emacs: Via the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Easy-Customization.html][customize
interface]], [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Invocation.html][command line arguments]], or writing an [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html][init file]].  I
exclusively use the init file approach, because it lets me keep my
whole customization in one file.

Use =C-c C-v t= in this file to generate the init file.  Use ‚ÄùM-x
package-refresh-contents‚Äù when starting Emacs the first time with this
configuration.  Use =M-x list-packages= from time to time to update
packages.

* /usr/local/share/site-lisp/site-start.el

https://emacs.stackexchange.com/questions/56375/user-init-file-variable-value-doesnt-change
Current workaround is symlinking init.el from a default path:
#+BEGIN_SRC sh :tangle no
ln -s $my_base/emacs/init.el ~/.emacs.d/init.el
#+END_SRC

For information on PATH, see http://stackoverflow.com/a/9182668 and
http://emacs.stackexchange.com/questions/550/exec-path-and-path.

As noted [[https://stackoverflow.com/questions/60464/changing-the-default-folder-in-emacs][here]] and [[https://emacs.stackexchange.com/questions/32605/cannot-access-user-folder-in-emacs][here]], one can use set variable =default-directory=

https://stackoverflow.com/a/547451

#+BEGIN_SRC emacs-lisp :tangle site-start.el
(cond ((eq system-type 'gnu/linux)
       ;;(message "this is linux")
       (let ((base (concat (getenv "my_base") "/emacs/")))
	 (setq user-emacs-directory (file-name-as-directory base)
	       user-init-file (expand-file-name "init.el" user-emacs-directory)
	       my-base-directory (file-name-as-directory base)
	       )
	 (add-to-list 'load-path (directory-file-name "/usr/share/emacs/site-lisp/"))
	 )
       )
      ((eq system-type 'windows-nt)
       ;; (setq user-init-file (expand-file-name "test.el" user-emacs-directory))
       (setenv "HOME" "")
       (setenv "PATH"
	       (concat
		"C:/Users/" ; python
		";" "C:/Users/" ; git
		";" "C:/Users/" ; node & npm
		";" "C:/Users/" ; gnutls
		;; ";" (getenv "PATH")))
		(setq exec-path (split-string (getenv "PATH") path-separator))))
       )
      )
#+END_SRC


* init.el

** hello

#+begin_src emacs-lisp :tangle init.el
(server-start)
(message "[INFO] begin init.el")
(message user-init-file)
(message "[INFO] debug with M-x check-parens / ESC x check-parens")
#+end_src


** environment

Set all paths via environment variables in .profile, since that allows
us to anonymize directory structures with [[https://wiki.archlinux.org/title/Git#Filtering_confidential_information][git filters]]:
#+BEGIN_SRC emacs-lisp :tangle init.el
(cond ((eq system-type 'gnu/linux)
       (setq user-full-name (getenv "my_emacs_user_full_name")
	     user-mail-address (getenv "my_emacs_user_mail_address")
	     my-org-directory (getenv "my_emacs_org_directory")
	     my-emms-source-file-default-directory (getenv "my_emacs_emms_source_file_default_directory")
	     my-projects-dired-symlink (getenv "my_emacs_projects_dired_symlink")
	     my-projectile-search-path (getenv "my_emacs_projectile_searchpath")
	     ))
      ((eq system-type 'windows-nt)
       (setq user-full-name ""
	     user-mail-address ""
	     my-org-directory ""
	     )))
#+END_SRC


** other files

*** secrets

This file is where to put configuration that contains sensitive
information.

#+BEGIN_SRC emacs-lisp :tangle no
(setq secrets-file (expand-file-name "secrets.el" user-emacs-directory))
(if (file-exists-p secrets-file)
    (load secrets-file))
;; in general, is load or load-file better suited for this?
#+END_SRC

*** customize

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
#+END_SRC

#+BEGIN_SRC emacs-lisp :exports none :tangle no
;; Let Customize put its mess elsewhere
(setq custom-file "/dev/null")
(load custom-file t)
#+END_SRC


** basics

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq load-prefer-newer t
      disabled-command-function nil
      save-interprogram-paste-before-kill t
      echo-keystrokes 0.1
      confirm-nonexistent-file-or-buffer nil
      completion-ignore-case t
      ;;next-line-add-newlines t ; https://www.masteringemacs.org/article/effective-editing-movement
      delete-by-moving-to-trash t
      switch-to-buffer-in-dedicated-window 'prompt
      kill-whole-line t
      ;;auto-hscroll-mode 'current-line ; https://old.reddit.com/r/emacs/comments/6au45k/is_it_possible_to_truncate_long_lines_the_same/dhqzchv/
      use-short-answers t
      )
;; (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** disable suspend-frame

#+begin_src emacs-lisp :tangle init.el
(global-unset-key (kbd "C-z"))
#+end_src

*** fix for 'saving clipboard to x clipboard manager takes forever on exit'

See [[https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=908159;msg=5][this bug report]] for details

#+begin_src emacs-lisp :tangle init.el
(setq x-select-enable-clipboard-manager nil)
#+end_src

*** mouse-avoidance-mode

Move mouse cursor if too close to point:
#+BEGIN_SRC emacs-lisp :tangle no
(mouse-avoidance-mode 'exile)
#+END_SRC

*** debug by default

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq debug-on-error t)
#+END_SRC

*** bookmarks

Instead of saving bookmarks to file only on exit, write them as soon
as they get set:
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq bookmark-save-flag 1
      bookmark-default-file (expand-file-name "bookmarks" my-base-directory)
      )
#+END_SRC

*** truncate

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq-default truncate-lines t
	      word-wrap t)
#+END_SRC

*** parentheses

Highlight corresponding parentheses when cursor is on one:
#+BEGIN_SRC emacs-lisp :tangle init.el
(show-paren-mode t)
#+END_SRC

Automatically insert matching closing character when user types a pair
character:
#+BEGIN_SRC emacs-lisp :tangle init.el
(electric-pair-mode t)
#+END_SRC

*** indentation

#+begin_src emacs-lisp :tangle init.el
(electric-indent-mode t)
#+end_src

*** reload buffers

Automatically reload buffers when files change on disk:
#+BEGIN_SRC emacs-lisp :tangle init.el
(global-auto-revert-mode t)
(setq global-auto-revert-non-file-buffers t)
#+END_SRC

*** winner-mode

Record changes in window configuration:
#+BEGIN_SRC emacs-lisp :tangle init.el
(winner-mode t)
#+END_SRC

*** sensible selection

With active region, let typed text replace selection:
#+BEGIN_SRC emacs-lisp :tangle init.el
(delete-selection-mode t)
#+END_SRC

*** deactivate bells

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq ring-bell-function 'ignore
      ;;visible-bell nil ; default anyway
      )
#+END_SRC


** interface

*** title bar

#+begin_src emacs-lisp :tangle init.el
(setq frame-title-format '(multiple-frames "%b" ("" invocation-name ": %b %n")))
#+end_src

*** line-number-mode

#+begin_src emacs-lisp :tangle init.el
(setq display-line-numbers-type t) ; or 'relative
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src
https://emacs.stackexchange.com/questions/36149/show-both-relative-and-absolute-line-numbers-in-emacs-26
https://www.emacswiki.org/emacs/LineNumbers

(global-display-line-numbers-mode) Wuerde wahrscheinlich bei reboot
die buffer-individuelle (manuelle) ueberschreiben

*** gui

Remember to use ‚ÄùM-x eval-buffer‚Äù when starting Emacs for the first
time with this configuration.  Otherwise, this will not work:
#+BEGIN_SRC emacs-lisp :tangle no
(setq menu-bar-mode nil
      tool-bar-mode nil
      scroll-bar-mode nil)
#+END_SRC

Somehow, this just does not work with the above.  However, eval-buffer
does work when using this:
#+BEGIN_SRC emacs-lisp :tangle init.el
  (when (display-graphic-p)
    (customize-save-variable 'menu-bar-mode nil)
    (customize-save-variable 'tool-bar-mode nil)
    (customize-save-variable 'scroll-bar-mode nil))
#+END_SRC

Not tried yet:
#+BEGIN_SRC emacs-lisp :tangle no
(when window-system
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
  (tooltip-mode 0))
#+END_SRC

*** fringes

Fringe display uses bitmaps, so it will not work with terminal Emacs:
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq-default indicate-buffer-boundaries 'left
	      indicate-empty-lines t)
#+END_SRC

*** cursor

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq-default x-stretch-cursor t)
#+END_SRC

*** current line

#+BEGIN_SRC emacs-lisp :tangle init.el
(global-hl-line-mode t)
#+END_SRC

*** prettify symbols

#+BEGIN_SRC emacs-lisp :tangle init.el
(global-prettify-symbols-mode t)
(setq prettify-symbols-unprettify-at-point 'right-edge)
;; (add-hook 'emacs-lisp-mode-hook
;;	  (lambda ()
;;	    (push '("'gnu/linux" . ?üêß) prettify-symbols-alist)
;;	    ))
#+END_SRC
http://endlessparentheses.com/new-in-emacs-25-1-have-prettify-symbols-mode-reveal-the-symbol-at-point.html

*** fonts

Some nice ones from my font collection:
- Averia Serif Libre
- DejaVu Sans Mono
- Fantasque Sans Mono
- Fira Code
- Hack
- ia Writer Quattro V
- Input Mono Compressed
- Input Serif
- Monoid
- OpenDyslexic[Mono]
- Roboto Mono/Condensed

- Terminus

run this to change font while emacs is running:
#+begin_src emacs-lisp :tangle no
(let ((mainfont "Terminus"))
  (my-set-font))
#+end_src

#+begin_src emacs-lisp :tangle init.el
(setq mainfont "Fantasque Sans Mono")
(setq fontdefault mainfont)
(setq fontfixedpitch mainfont)
(setq fontvariablepitch "Roboto Condensed")
#+end_src
https://old.reddit.com/r/emacs/comments/5twcka/which_font_do_you_use/ddq3mx7/
https://stackoverflow.com/questions/3758139/variable-pitch-for-org-mode-fixed-pitch-for-tables

taken from https://github.com/jwiegley/dot-emacs/blob/master/init.el
#+begin_src emacs-lisp :tangle init.el
(defun my-set-font ()
  (message "my-set-font got called")
  (set-frame-font mainfont t t)
  (set-face-attribute 'default nil :height 130) ; default: 130

  ;; https://explog.in/notes/writingsetup.html
  (set-face-attribute 'default nil :family mainfont)
  (set-face-attribute 'fixed-pitch nil :family mainfont)
  (set-face-attribute 'variable-pitch nil :family fontvariablepitch)

  ;; (when (display-graphic-p)
  ;;   (when (member fontdefault (font-family-list))
  ;;     (set-frame-font fontdefault nil t)
  ;;     (set-face-attribute 'default nil :font fontdefault))
  ;;   (when (member fontfixedpitch (font-family-list))
  ;;     (set-face-attribute 'fixed-pitch nil :font fontfixedpitch))
  ;;   (when (member fontvariablepitch (font-family-list))
  ;;     (set-face-attribute 'variable-pitch nil :font fontvariablepitch))
  ;;   )

  )
;; (advice-add 'make-frame-command :after #'my-set-font)
#+end_src

further reading:
https://www.gnu.org/software/emacs/manual/html_node/emacs/Fonts.html
https://www.gnu.org/software/emacs/manual/html_node/efaq/How-to-add-fonts.html
https://emacs.stackexchange.com/questions/3038/using-a-different-font-for-each-major-mode/3042#3042
https://stackoverflow.com/questions/39859141/how-to-use-different-fonts-within-the-same-org-mode-buffer

https://emacs.stackexchange.com/questions/51438/why-after-init-hook-is-not-invoked-workaround-is-emacs-startup-hook
#+begin_src emacs-lisp :tangle init.el
(add-hook 'emacs-startup-hook 'my-set-font)
#+end_src


** packaging

*** setup

**** package

Define repositories additional packages will be pulled from.  Since
the GNU TLS library can not be bundled on Windows due to legal
reasons, this is done platform-specific:
#+BEGIN_SRC emacs-lisp :tangle init.el
(require 'package)
(setq package-archives '(("org" . "https://orgmode.org/elpa/")))
(cond ((eq system-type 'gnu/linux)
       (unless (assoc-default "gnu"   package-archives)(add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/") t))
       (unless (assoc-default "melpa" package-archives)(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"   ) t))
       )
      ((eq system-type 'windows-nt)
       (unless (assoc-default "gnu"   package-archives)(add-to-list 'package-archives '("gnu"   . "http://elpa.gnu.org/packages/") t))
       (unless (assoc-default "melpa" package-archives)(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"   ) t))
       )
      )
#+END_SRC

Assigning priorities to the package-archives prevents shadowing by
older package versions:
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq package-archive-priorities ; http://endlessparentheses.com/new-in-emacs-25-1-archive-priorities-and-downgrading-packages.html
      '(("org"   . 30)
	("melpa" . 20)
	("gnu"   . 10)
	))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle init.el
(package-initialize)
#+END_SRC

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Package-Files.html][Packaging]] puts the install location to =package-user-dir=

**** use-package

Download and install (if it is not installed), and load the package
‚Äùuse-package‚Äù.  It is used as package manager:
#+BEGIN_SRC emacs-lisp :tangle init.el
;; http://stackoverflow.com/questions/21064916/auto-install-emacs-packages-with-melpa
(if (not (package-installed-p 'use-package))
    (progn
      (package-refresh-contents)
      (package-install 'use-package)))
(require 'use-package)
#+END_SRC

Make use-package install all packages automatically, and report on
everything it loads:
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq use-package-verbose       t
      use-package-always-ensure t)
#+END_SRC


*** packages

automatically native-compile packages upon installation:
#+begin_src emacs-lisp :tangle init.el
(setq package-native-compile t)
#+end_src

Load and configure packages:

**** magit

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package magit
  :bind
  ("M-n" . magit-status)
  )
#+END_SRC

**** org-mode

So much to learn from [[http://sriramkswamy.github.io/dotemacs/#orgheadline11][here]].  Note that it is possible to make org
[[https://orgmode.org/manual/Agenda-Files.html][maintain the org-agenda-files itself]].
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package org
  :bind
  (("C-c l" . org-store-link)
   ("C-c a" . org-agenda)
   ("C-c c" . org-capture)
   ("C-c b" . org-iswitchb))
  :config
  (setq
   ;; org-startup-indented t ; clean view
   org-indent-mode nil
   org-startup-folded 'children
   org-adapt-indentation nil
   org-hide-emphasis-markers t
   org-hide-leading-stars t
   system-time-locale "C" ; make timestamps appear in English
   org-special-ctrl-a/e t
   org-src-fontify-natively t ; syntax highlight code blocks
   org-src-tab-acts-natively t
   org-indent-indentation-per-level 1 ; https://explog.in/notes/writingsetup.html
   ;; org-cycle-separator-lines 1
   org-default-notes-file (expand-file-name "agenda/agenda.org" my-org-directory)
   org-clock-persist t
   org-hide-block-startup t
   org-confirm-babel-evaluate nil
   org-src-preserve-indentation t ; https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-makefile.html
   org-startup-with-inline-images nil
   org-refile-targets '((org-agenda-files . (:maxlevel . 6)))
   org-log-done 'time ; keep track of when a certain TODO item was marked as done
   )
  (org-clock-persistence-insinuate)
  (calendar-set-date-style "iso")
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)
     ;(js . t)
     ;(awk . t)
     ;(gnuplot . t)
     ;(lilypond . t)
     ;(dot . t)
     ;(scheme . t)
     (python . t)
     (julia . t)
     ))
  (setq scheme-program-name "guile"
	org-babel-python-command "python3")
  (setq org-capture-templates '(("t" "Task" entry (file+olp+datetree "" "Tasks")
				 "* TODO %?\n  %t\n  %i\n" :tree-type week)
				)
	)
  ;(require 'lilypond-mode)
  ;(require 'ob-lilypond)
  (add-to-list 'org-src-lang-modes '("html" . web))
  (add-to-list 'org-export-backends 'md)
  (cond ((eq system-type 'gnu/linux)
	 (setq org-directory my-org-directory
	       ;; org-agenda-files (list (expand-file-name "agenda" my-org-directory))
	       org-agenda-files (list (expand-file-name "agenda/agenda.org" my-org-directory))
	       diary-file (expand-file-name "diary.org" my-org-directory)
	       ))
	((eq system-type 'windows-nt)
	 org-agenda-files (list (expand-file-name "~/files/agendafiles.org"))))
  (set-face-attribute 'org-level-1 nil :weight 'bold)
  (set-face-attribute 'org-level-2 nil :weight 'bold)
  (set-face-attribute 'org-level-3 nil :weight 'bold)
  (set-face-attribute 'org-level-4 nil :weight 'bold)
  (set-face-attribute 'org-level-5 nil :weight 'bold)
  (set-face-attribute 'org-level-6 nil :weight 'bold)
  (set-face-attribute 'org-level-7 nil :weight 'bold)
  (set-face-attribute 'org-level-8 nil :weight 'bold)
  ;; (org-link-set-parameters "xdg" :follow (lambda (path) (make-process :name "xdg-open" :buffer nil :command (list "xdg-open" path))))
  (org-link-set-parameters "xdg" :follow (lambda (path)
					   (let ((async-shell-command-buffer 'new-buffer))
					     (async-shell-command (concat "nohup xdg-open " path))
					     )
					   ))
  (add-to-list 'display-buffer-alist (cons "\\*Async Shell Command\\*.*" (cons #'display-buffer-no-window nil)))
  )
#+END_SRC
https://jherrlin.github.io/posts/emacs-orgmode-source-code-blocks/

***** tangle-dir

Put string into register r via =C-x r i r= for easy access:
‚Äò:tangle (org-in-tangle-dir "")‚Äô
#+begin_src emacs-lisp :tangle init.el
(defun org-in-tangle-dir (sub-path)
  "Expand the SUB-PATH into the directory given by the tangle-dir
  property if that property exists, else use the
  'default-directory'."
  (expand-file-name sub-path
		    (or
		     (org-entry-get (point) "tangle-dir" 'inherit)
		     default-directory)))
#+end_src
https://emacs.stackexchange.com/questions/46479/how-to-set-a-tangled-parent-directory-for-each-subtree-in-org-mode

***** toc-org

M-x toc-org-mode
#+BEGIN_SRC emacs-lisp :tangle no
(use-package toc-org
  :config
  (if (require 'toc-org nil t)
      (add-hook 'org-mode-hook 'toc-org-enable)
    (warn "toc-org not found"))
  )
#+END_SRC
https://github.com/snosov1/toc-org

***** org-ref

#+begin_src emacs-lisp :tangle no
(use-package org-ref)
#+end_src


**** diminish

Hide minor modes from the mode line
#+begin_src emacs-lisp :tangle init.el
(use-package diminish
  :config
  (eval-after-load "which-key" '(diminish 'which-key-mode))
  (eval-after-load "hungry-delete" '(diminish 'hungry-delete-mode))
  (eval-after-load "abbrev" '(diminish 'abbrev-mode))
  (eval-after-load "simple" '(diminish 'auto-fill-function))
)
#+end_src

**** abbrev-mode

https://www.emacswiki.org/emacs/AbbrevMode
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package abbrev
  :ensure nil
  :config
  (if (file-exists-p abbrev-file-name)
      (quietly-read-abbrev-file))
  (setq abbrev-file-name (expand-file-name "abbrev_defs" my-base-directory)
	save-abbrevs 'silently)
  (setq-default abbrev-mode t)
  )
#+END_SRC

(setq-default abbrev-mode t)
(setq save-abbrevs 'silently)

***** abbrev file

#+BEGIN_SRC emacs-lisp :tangle abbrev_defs
(define-abbrev-table 'global-abbrev-table '(
					    ;; ("i" "I" nil 1)
					    ;; ("n" "#+NAME:" nil 1) ;https://stackoverflow.com/a/17883192

					    ;; German Umlauts
					    ("Ae" "√Ñ" nil 1)
					    ("ae" "√§" nil 1)
					    ("Oe" "√ñ" nil 1)
					    ("oe" "√∂" nil 1)
					    ("Ue" "√ú" nil 1)
					    ("ue" "√º" nil 1)
					    ("Ss" "·∫û" nil 1)
					    ("ss" "√ü" nil 1)

					    ;; Google Docs Ersetzungen
					    ("(c)" "¬©" nil 1)
					    ("(r)" "¬Æ" nil 1)
					    ("-->" "‚Üí" nil 1)
					    ("..." "‚Ä¶" nil 1)
					    ("1/2" "¬Ω" nil 1)
					    ("1/3" "‚Öì" nil 1)
					    ("1/4" "¬º" nil 1)
					    ("1/5" "‚Öï" nil 1)
					    ("1/6" "‚Öô" nil 1)
					    ("1/8" "‚Öõ" nil 1)
					    ("2/3" "‚Öî" nil 1)
					    ("2/5" "‚Öñ" nil 1)
					    ("3/4" "¬æ" nil 1)
					    ("3/5" "‚Öó" nil 1)
					    ("3/8" "‚Öú" nil 1)
					    ("4/5" "‚Öò" nil 1)
					    ("5/6" "‚Öö" nil 1)
					    ("5/8" "‚Öù" nil 1)
					    ("7/8" "‚Öû" nil 1)
					    ("<--" "‚Üê" nil 1)
					    ("<==" "‚áê" nil 1)
					    ("<=>" "‚áî" nil 1)
					    ("==>" "‚áí" nil 1)
					    ("c/o" "‚ÑÖ" nil 1)
					    ("tm" "‚Ñ¢" nil 1)

					    ))
#+END_SRC


**** wgrep

#+begin_src elisp :tangle init.el
(use-package wgrep
  :config
  (setq wgrep-enable-key "e")
  )
#+end_src

**** dired-du

#+begin_src emacs-lisp :tangle no
(use-package dired-du
  )
#+end_src

**** theme

Use solarized-light in window system, wombat when run in console mode
(emacs -nw):
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package solarized-theme
  :config
  ;; (setq custom-safe-themes 'solarized-light)
  (defun theme-after-init ()
    (if (display-graphic-p)
	(progn
	  (mapcar #'disable-theme custom-enabled-themes)
	  (load-theme 'solarized-selenized-white t)
	  ;; Attributes can be read with (face-attribute 'mode-line :background)
	  (set-face-attribute 'mode-line nil :background "grey75" :foreground "black")
	  ;; (set-face-attribute 'mode-line-inactive nil :background "grey90" :foreground "grey75" )
	  ;; (set-face-attribute 'mode-line-inactive nil :background nil :foreground nil :box nil :inherit nil)
	  ;; (set-face-background 'minibuffer-prompt "grey90")
	  ;; (add-hook 'focus-in-hook #'ato-line-set-selected-window)
	  )
      (progn
	(mapcar #'disable-theme custom-enabled-themes)
	(load-theme 'wombat t)
	)))
  (setq ;; solarized-scale-org-headlines nil
	solarized-use-variable-pitch nil)
  :init
  (my-set-font)
  )
(add-hook 'window-setup-hook 'theme-after-init)
#+END_SRC
https://www.gonsie.com/blorg/modeline.html

#+begin_src emacs-lisp :tangle no
(add-hook 'window-setup-hook (progn (mapcar #'disable-theme custom-enabled-themes)(load-theme 'solarized-light t)))
(add-hook 'tty-setup-hook (progn (mapcar #'disable-theme custom-enabled-themes)(load-theme 'wombat t)))
#+end_src

Eval this to disable all coloring in emacs, using only black and white:
#+name: bwemacs
#+begin_src emacs-lisp :tangle no
(mapcar #'disable-theme custom-enabled-themes)
(setq-default global-font-lock-mode nil)
(setq global-font-lock-mode nil)
#+end_src

***** modeline

****** custom                                                      :noexport:

http://emacs.stackexchange.com/questions/13652/how-to-customize-mode-line-format
#+name: modelinedefault
#+BEGIN_SRC emacs-lisp :tangle no
(setq-default mode-line-format)
(setq mode-line-format
      (list
       "%e"
       mode-line-front-space
       mode-line-mule-info
       mode-line-client
       mode-line-modified
       mode-line-remote
       mode-line-frame-identification
       mode-line-buffer-identification
       "   "
       mode-line-position
       (vc-mode vc-mode)
       "  "
       mode-line-modes
       mode-line-misc-info
       mode-line-end-spaces))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
(setq-default mode-line-format
	      (list
	       "%e"
	       mode-line-front-space
	       mode-line-mule-info
	       mode-line-client
	       mode-line-modified
	       mode-line-remote
	       mode-line-frame-identification
	       mode-line-buffer-identification
	       "   "
	       vc-mode
	       "  "
	       mode-line-modes
	       mode-line-misc-info
	       mode-line-end-spaces))
#+END_SRC

****** like occasionallycogent

Helper functions to show different modeline in in/active windows:
#+begin_src emacs-lisp :tangle no
;; Keep track of selected window, so we can render the modeline differently
(defvar ato-line-selected-window (frame-selected-window))
(defun ato-line-set-selected-window (&rest _args)
  (when (not (minibuffer-window-active-p (frame-selected-window)))
    (setq ato-line-set-selected-window (frame-selected-window))
    (force-mode-line-update)))
(defun ato-line-unset-selected-window ()
  (setq ato-line-selected-window nil)
  (force-mode-line-update))
(add-hook 'window-configuration-change-hook #'ato-line-set-selected-window)
(add-hook 'focus-in-hook #'ato-line-set-selected-window)
(add-hook 'focus-out-hook #'ato-line-unset-selected-window)
(advice-add 'handle-switch-frame :after #'ato-line-set-selected-window)
(advice-add 'select-window :after #'ato-line-set-selected-window)
(defun ato-line-selected-window-active-p ()
  (eq ato-line-selected-window (selected-window)))
#+end_src

#+begin_src emacs-lisp :tangle no
(setq-default mode-line-format
	      (list
	       '(:eval (propertize (if (eq 'emacs ))))))
#+end_src
Taken from https://occasionallycogent.com/custom_emacs_modeline/index.html

****** column number

#+BEGIN_SRC emacs-lisp :tangle init.el
(column-number-mode t)
#+END_SRC

****** clock

See info for format-time-string
#+BEGIN_SRC emacs-lisp :tangle no
(setq display-time-format "%F %R %a%t")
(display-time-mode t)
#+END_SRC

****** compact

#+begin_src emacs-lisp :tangle init.el
(setq mode-line-compact 'long)
#+end_src


**** emms

[[https://www.gnu.org/software/emms/manual/#Quickstart-Guide][The Emacs Multimedia System]]
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package emms
  :config
  (emms-all)
  (emms-default-players)
  (setq emms-source-file-default-directory my-emms-source-file-default-directory
	)
  )
#+END_SRC

**** aggressive-indent-mode

#+BEGIN_SRC emacs-lisp :tangle no
(use-package aggressive-indent
  :config
  (global-aggressive-indent-mode 1)
  )
#+END_SRC

**** web-mode

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package web-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.cmp?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.xml?\\'" . web-mode))
  )
#+END_SRC

**** expand-region

#+begin_src emacs-lisp :tangle init.el
(use-package expand-region
  :config
  (global-set-key (kbd "M-i") 'er/expand-region)
)
#+end_src

**** projectile

project management library:
#+begin_src emacs-lisp :tangle no
(use-package projectile
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
	      ("s-p" . projectile-command-map)
	      ("C-c p" . projectile-command-map))
  :config
  (setq projectile-project-search-path `(,(file-name-as-directory my-projectile-search-path))))
#+end_src

**** hungry-delete

Make backspace and C-d erase /all/ consecutive white space in a given
direction:
#+begin_src emacs-lisp :tangle init.el
(use-package hungry-delete
  :init
  (global-hungry-delete-mode))
#+end_src

see also: =C-h f cycle-spacing RET=

**** openwith

While it opens the files from dired with RET as requested, this always
throws error "Openend ..."
#+begin_src emacs-lisp :tangle no
(use-package openwith
  :config
  (setq openwith-associations
	(list
	 (list (openwith-make-extension-regexp
		'("mpg" "mpeg" "mp3" "mp4"
		  "avi" "wmv" "wav" "mov" "flv"
		  "ogm" "ogg" "mkv"))
	       "mpv"
	       '(file))
	 (list (openwith-make-extension-regexp
		'("xbm" "pbm" "pgm" "ppm" "pnm"
		  "png" "gif" "bmp" "tif" "jpeg" "jpg"))
	       "eog"
	       '(file))
	 (list (openwith-make-extension-regexp
		'("doc" "xls" "ppt" "odt" "ods" "odg" "odp"))
	       "libreoffice"
	       '(file))
	 '("\\.lyx" "lyx" (file))
	 '("\\.chm" "kchmviewer" (file))
	 (list (openwith-make-extension-regexp
		'("pdf" "ps" "ps.gz" "dvi"))
	       "okular"
	       '(file))
	 ))
  (openwith-mode 1))
#+end_src
https://stackoverflow.com/questions/11218316/emacs-dired-and-openwith

Which is why I use Xah Lee‚Äôs function:
#+begin_src emacs-lisp :tangle init.el
(defun ato-open-in-external-app (&optional @fname)
  "Open the current file or dired marked files in external app.
  When called in emacs lisp, if @fname is given, open that.
  URL http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html
  Version 2019-11-04 2021-02-16"
  (interactive)
  (let* (
	 ($file-list
	  (if @fname
	      (progn (list @fname))
	    (if (string-equal major-mode "dired-mode")
		(dired-get-marked-files)
	      (list (buffer-file-name)))))
	 ($do-it-p (if (<= (length $file-list) 5)
		       t
		     (y-or-n-p "Open more than 5 files? "))))
    (when $do-it-p
      (cond
       ((string-equal system-type "windows-nt")
	(mapc
	 (lambda ($fpath)
	   (shell-command
	    (concat "PowerShell -Command\"Invoke-Item-LiteralPath\" " "'"
		    (shell-quote-argument (expand-file-name $fpath )) "'")))
	 $file-list))
       ((string-equal system-type "darwin")
	(mapc
	 (lambda ($fpath)
	   (shell-command
	    (concat "open "
		    (shell-quote-argument $fpath))))
	 $file-list))
       ((string-equal system-type "gnu/linux")
	(mapc
	 (lambda ($fpath) (let ((process-connection-type nil))
		       (start-process "" nil "xdg-open" $fpath)))
	 $file-list))))))
#+end_src
https://stackoverflow.com/questions/25109968/in-emacs-how-to-open-file-in-external-program-without-errors
http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html

possible alternative to both:
https://old.reddit.com/r/emacs/comments/l786s4/a_humble_advice_on_dired_and_projectile_for_elisp/

**** which-key

#+begin_src emacs-lisp :tangle init.el
(use-package which-key
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.01))
#+end_src

**** company

#+begin_src emacs-lisp :tangle no
(use-package company
  :config
  (setq company-dabbrev-downcase nil
	company-idle-delay 0.01
	company-minimum-prefix-length 1
	company-selection-wrap-around t
	company-global-modes '(not eshell-mode)
	)
  (global-company-mode)
  (company-tng-mode)
  )
#+end_src

so kriegt man zumindest eine rudimentaere, und fast nutzlose etags file:
#+begin_src emacs-lisp
(async-shell-command "find . -type f -name '*.cls' | etags -r '/.* static .*){.*/i' -")
(async-shell-command "find . -type f -name '*.js' | etags -ar '/.*function.*/i' -")
(visit-tags-table TAGS)
#+end_src

**** gnuplot

#+begin_src emacs-lisp :tangle init.el
(use-package gnuplot)
#+end_src

**** simple-httpd

=M-x httpd-start=

#+begin_src emacs-lisp :tangle init.el
(use-package simple-httpd
  :config
  (setq httpd-root "/var/www"
	httpd-port "8976")
  )
#+end_src

**** programming languages

***** lisps

#+begin_src emacs-lisp :tangle no
(use-package smartparens)
(use-package geiser
  :init
  (add-hook 'scheme-mode-hook 'geiser-mode)
  )
(use-package geiser-guile
  :init
  (setq geiser-default-implementation 'guile)
  )
#+end_src

***** lsp-mode

#+begin_src emacs-lisp :tangle init.el
(use-package lsp-mode
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :hook (;; replace XXX-mode with concrete major-mode(e.g. python-mode)
	 (rust-mode . lsp-deferred)
	 ;;(javascript-mode . lsp-deferred)
	 )
  :commands (lsp-deferred)
  )
#+end_src
https://emacs-lsp.github.io/lsp-mode/page/installation/#use-package

***** rust-mode

#+begin_src emacs-lisp :tangle init.el
(use-package rust-mode
  :config
  (add-hook 'rust-mode-hook (lambda ()
			      (setq indent-tabs-mode nil)))
  ;; (add-hook 'before-save-hook (lambda ()
  ;; 				(when (eq 'rust-mode major-mode)
  ;; 				  (lsp-format-buffer))))
  (setq rust-format-on-save t)
  (define-key rust-mode-map (kbd "C-c C-c") 'rust-run)
  )
#+end_src

***** json-navigator

#+begin_src emacs-lisp :tangle no
(use-package json-navigator)
#+end_src

***** javascript

https://emacs.cafe/emacs/javascript/setup/2017/04/23/emacs-setup-javascript.html

****** js2-mode

#+begin_src emacs-lisp :tangle no
(use-package js2-mode
  :config
  ;; (add-hook 'javascript-mode-hook #'js2-minor-mode)
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  (add-hook 'js2-mode-hook #'js2-imenu-extras-mode))
#+end_src

****** js2-refactor

#+begin_src emacs-lisp :tangle no
(use-package js2-refactor
  :config
  (add-hook 'js2-mode-hook #'js2-refactor-mode)
  (js2r-add-keybindings-with-prefix "C-c C-m")
  (define-key js2-mode-map (kbd "C-k") #'js2r-kill)
  )
#+end_src

****** xref-js2

#+begin_src emacs-lisp :tangle no
(use-package xref-js2
  :config
  (define-key js2-mode-map (kbd "M-.") nil)
  (add-hook 'js2-mode-hook (lambda ()
			    (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t)))
  (setq xref-js2-search-program 'rg)
  )
#+end_src


***** typescript

#+begin_src emacs-lisp :tangle no
(use-package ob-typescript)
(use-package typescript-mode ;tide
  :config
  (add-to-list 'auto-mode-alist '("\\.ts?\\'" . typescript-mode))
)
#+end_src

***** julia

#+begin_src emacs-lisp :tangle no
(use-package julia-mode)
#+end_src

**** docstr

#+begin_src emacs-lisp :tangle no
(use-package docstr
  :config
  (add-hook 'web-mode-hook (lambda () (docstr-mode 1)))
  )
#+end_src

**** not in repositories - from manually downloaded file

***** apex-mode

#+begin_src emacs-lisp :tangle init.el
(add-to-list 'load-path (concat my-base-directory "apex-mode/"))
(require 'apex-mode)
#+end_src


** behaviour

*** auto-quit running processes on exit

#+begin_src emacs-lisp :tangle init.el
(setq confirm-kill-processes nil)
#+end_src

*** input method

https://stackoverflow.com/a/15801170
#+BEGIN_SRC emacs-lisp :tangle no
;; Main setup for  all the buffers
(defadvice switch-to-buffer (after activate-input-method activate)
  (activate-input-method "programmer-dvorak"))
;; Sets up Dvorak for the minibuffer
(add-hook 'minibuffer-setup-hook (lambda () (set-input-method "programmer-dvorak")))
;; Sets up Dvorak for *scratch* buffer (used Qwerty on my PC otherwise)
(save-excursion
  (set-buffer (get-buffer "*scratch*"))
  (set-input-method "programmer-dvorak"))
#+END_SRC

*** startup

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq inhibit-startup-screen t
      ;;initial-scratch-message ";; C-M-x eval-defun\n;; √º√§√∂√ü √ú√Ñ√ñ·∫û\n"
      initial-scratch-message ""
      )
#+END_SRC

Make the GNU project commercial [[https://emacs.stackexchange.com/questions/432/how-to-change-default-minibuffer-message][disappear]]:
#+BEGIN_SRC emacs-lisp :tangle init.el
(defun display-startup-echo-area-message ()
  (message ""))
#+END_SRC

*** Writing prose

Look into tildify-mode as well.
#+BEGIN_SRC emacs-lisp :tangle init.el
(add-hook 'text-mode-hook
	  (lambda ()
	    ;; (electric-quote-mode)
	    (auto-fill-mode)))
#+END_SRC

*** whitespace

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq-default show-trailing-whitespace t)
#+END_SRC

When saving a file, do some cleanup:
#+BEGIN_SRC emacs-lisp :tangle no
(add-hook 'before-save-hook 'whitespace-cleanup)
#+END_SRC

There is an alternative that does less:
#+BEGIN_SRC emacs-lisp :tangle init.el
(add-hook 'before-save-hook (lambda() (delete-trailing-whitespace)))
#+END_SRC

*** backups, autosaves & lockfiles

http://stackoverflow.com/a/151946
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq make-backup-files   nil
      auto-save-default   nil
      create-lockfiles    nil
      backup-by-copying   t
      delete-old-versions t
      auto-save-file-name-transforms `((".*" ,(concat my-base-directory "autosaves/\\1") t))
      backup-directory-alist         `(("." . ,(concat my-base-directory "backups/")))
      )
#+END_SRC
https://www.gnu.org/software/emacs/manual/html_node/elisp/Backquote.html
http://snarfed.org/gnu_emacs_backup_files

*** locale

Note that on Windows, [[https://rufflewind.com/2014-07-20/pasting-unicode-in-emacs-on-windows][the selection coding system is utf-16-le]], hence
the need for [[http://stackoverflow.com/a/2903256/1435577][the unless clause]].

https://github.com/pierre-lecocq/emacs.d/blob/master/init.el
http://stackoverflow.com/a/17537564

#+BEGIN_SRC emacs-lisp :tangle init.el
(set-charset-priority      'unicode)
(prefer-coding-system        'utf-8)
(set-default-coding-systems  'utf-8)
(set-terminal-coding-system  'utf-8)
(set-keyboard-coding-system  'utf-8)
(set-language-environment    'utf-8)
(unless (eq system-type 'windows-nt)
  (set-selection-coding-system 'utf-8))
(setq locale-coding-system   'utf-8
      default-buffer-file-coding-system 'utf-8-unix)
#+END_SRC

*** time-stamps

Auto-update time stamps if present:
#+BEGIN_SRC emacs-lisp :tangle init.el
(add-hook 'before-save-hook 'time-stamp)
(setq time-stamp-format "%:y-%02m-%02dT%02H:%02M:%02S")
#+END_SRC

*** network security

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq network-security-level 'high
      nsm-save-host-names t)
#+END_SRC

*** save-place

#+BEGIN_SRC emacs-lisp :tangle init.el
(save-place-mode t)
#+END_SRC

*** search

Character-folding search
http://endlessparentheses.com/new-in-emacs-25-1-easily-search-non-ascii-characters.html
#+BEGIN_SRC emacs-lisp :tangle init.el
 (setq search-default-mode #'char-fold-to-regexp
       replace-char-fold   t)
#+END_SRC

*** ido-mode

https://masteringemacs.org/article/introduction-to-ido-mode
#+BEGIN_SRC emacs-lisp :tangle init.el
(ido-mode t)
(ido-everywhere t)
(setq ido-save-directory-list-file (concat my-base-directory "last.ido")
      ido-enable-flex-matching     t        ; flexible string matching <3, *very* useful
      ido-create-new-buffer        'always  ; don‚Äôt ask for confirmation on visiting new file
      ido-use-filename-at-point 'guess
      )
#+END_SRC

*** dired

The default keybinding for =dired-hide-details-mode= is =(=.
Use =C-x C-j= in a file buffer to jump to it in dired (dired-jump).
#+BEGIN_SRC emacs-lisp :tangle init.el
(add-hook 'dired-mode-hook 'dired-hide-details-mode)
(setq dired-listing-switches     " --almost-all --group-directories-first --no-group --human-readable -l -v"
      ls-lisp-dirs-first         t
      ls-lisp-ignore-case        t
      dired-ls-F-marks-symlinks  t
      dired-auto-revert-buffer   t
      dired-recursive-copies     t
      dired-recursive-deletes    t
      read-file-name-completion-ignore-case t
      read-buffer-completion-ignore-case t
      dired-dwim-target t
      dired-guess-shell-alist-user '(("\\.pdf\\'" "org.kde.okular")) ;or: okular (flatpak: org.kde.okular)
      dired-kill-when-opening-new-dired-buffer t
      )
#+END_SRC

TODO: interesting stuff here:
https://www.emacswiki.org/emacs/DiredPower

*** ibuffer

#+BEGIN_SRC emacs-lisp :tangle init.el
;; (setq-default ibuffer-default-sorting-mode 'alphabetic)
(add-hook 'ibuffer-mode-hook (lambda ()
			       (ibuffer-auto-mode t)            ; auto-update
			       (ibuffer-filter-by-name "^[^*]") ; only show buffers with files http://stackoverflow.com/a/7914743
			       ))
#+END_SRC

*** shell

TODO: https://github.com/monsanto/readline-complete.el

**** system shell

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq comint-scroll-to-bottom-on-input t
      comint-prompt-read-only          t
      comint-input-ignoredups          t
      comint-completion-autolist       t
      shell-file-name "/bin/sh"
      )
#+END_SRC

**** eshell

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq eshell-prompt-function ; Make sure to update ‚Äòeshell-prompt-regexp‚Äô so that it will match your prompt.
      (lambda ()
	(concat (eshell/basename (abbreviate-file-name (eshell/pwd)))
		(if (= (user-uid) 0) " # " " $ ")))
      eshell-cmpl-ignore-case t ;pcomplete-ignore-case is assigned to ‚Äòpcomplete-ignore-case‚Äô locally after eshell starts.
      eshell-cmpl-autolist t
      eshell-cmpl-recexact t

      eshell-scroll-to-bottom-on-input t
      eshell-error-if-no-glob t
      eshell-hist-ignoredups t
      eshell-history-size 1000
      eshell-prefer-lisp-functions t
      eshell-destroy-buffer-when-process-dies t)
(add-hook 'eshell-mode-hook (lambda ()
			      ;; delete all aliases in eshell-aliases-file
			      (mapcar #'eshell/alias (eshell-alias-completions ""))

			      ;;define aliases
			      (eshell/alias "aus" "shutdown now")
			      (eshell/alias "clamscan" "clamscan --recursive --allmatch --detect-pua=yes --detect-structured=yes --heuristic-scan-precedence=yes --max-filesize=2048M")
			      (eshell/alias "clip" "xclip -selection clipboard")
			      (eshell/alias "dla" "youtube-dl -x -f bestaudio --write-description --restrict-filenames --add-metadata --xattrs --write-sub --sub-lang en,en-GB,de $1")
			      (eshell/alias "dlcv" "youtube-dl --skip-download --continue --no-post-overwrites --no-overwrites --restrict-filenames --ignore-errors --output \"%(playlist)s/subtitles/%(upload_date)s_%(playlist_index)s_%(title)s-%(id)s.%(ext)s\" --write-sub --all-subs --batch-file urls --quiet > >(tee list_subs) && youtube-dl --continue --download-archive index --no-post-overwrites --no-overwrites --restrict-filenames --ignore-errors -f \"worstvideo+worstaudio\" --add-metadata --xattrs --output \"%(playlist)s/%(upload_date)s_%(playlist_index)s_%(title)s-%(id)s.%(ext)s\" --write-description --merge-output-format mkv --embed-subs --all-subs --batch-file urls --playlist-random --quiet > >(tee list)")
			      (eshell/alias "dlca" "youtube-dl -x --continue --download-archive index --no-post-overwrites --no-overwrites --restrict-filenames --ignore-errors -f bestaudio --add-metadata --xattrs --output \"%(playlist)s/%(upload_date)s_%(playlist_index)s_%(title)s-%(id)s.%(ext)s\" --write-description --embed-subs --all-subs --batch-file urls --playlist-random | tee list")
			      (eshell/alias "dlma" "youtube-dl -x --restrict-filenames --ignore-errors -f bestaudio --write-description --add-metadata --xattrs --write-sub --embed-subs --all-subs --batch-file urls")
			      (eshell/alias "dlmv" "youtube-dl --restrict-filenames --ignore-errors -f bestvideo+bestaudio/best --write-description --add-metadata --xattrs --merge-output-format mkv --embed-subs --all-subs --batch-file urls")
			      (eshell/alias "dlpa" "youtube-dl -x --continue --download-archive index --no-post-overwrites --no-overwrites --output \"%(playlist_index)s_%(title)s-%(id)s.%(ext)s\" --restrict-filenames --ignore-errors -f bestaudio --write-description --add-metadata --xattrs --write-sub --all-subs --batch-file urls && mkdir subtitles && mv *.vtt *.description subtitles")
			      (eshell/alias "dlpv" "youtube-dl    --continue --download-archive index --no-post-overwrites --no-overwrites --output \"%(playlist_index)s_%(title)s-%(id)s.%(ext)s\" --restrict-filenames --ignore-errors              --write-description --add-metadata --xattrs --write-sub --all-subs --batch-file urls && mkdir subtitles && mv *.vtt *.description subtitles")
			      (eshell/alias "dlv" "youtube-dl -f bestvideo+bestaudio --write-description --restrict-filenames --add-metadata --xattrs --merge-output-format mkv --embed-subs --all-subs $1")
			      (eshell/alias "dvd" "mpv dvd://1")
			      (eshell/alias "e" "emacs-nox $*")
			      (eshell/alias "ffmpeg" "ffmpeg -hide_banner $1")
			      (eshell/alias "ffprobe" "ffprobe -hide_banner $1")
			      (eshell/alias "ga" "git add $*")
			      (eshell/alias "gb" "git branch $*")
			      (eshell/alias "gch" "git checkout $*")
			      (eshell/alias "gco" "git commit $*")
			      (eshell/alias "gd" "git diff $*")
			      (eshell/alias "gf" "git fetch $*")
			      (eshell/alias "gib" "kdeconnect-cli --name $1 --share $2")
			      (eshell/alias "gl" "git log -3")
			      (eshell/alias "gpl" "git pull $*")
			      (eshell/alias "gps" "git push $*")
			      (eshell/alias "gs" "git status")
			      (eshell/alias "l" "ls -CFAlhv --color=auto --group-directories-first $*")
			      (eshell/alias "ll" "tree -afpuhFi --dirsfirst -L 1 -- $*")
			      (eshell/alias "log" "loginctl kill-session $(loginctl list-sessions | head -n 2 | tail -n 1 | awk '{ print $1 })'")
			      (eshell/alias "m" "mpv --no-audio-display --shuffle $(cat playlist.m3u | shuf)")
			      (eshell/alias "mkdir" "mkdir -pv $*")
			      (eshell/alias "path" "printf \"%b\n\" \"$PATH\" | tr -s \":\" \"\n\"") ; is functionally identical to eshell/addpath without arguments
			      (eshell/alias "perms" "stat -c '%A %a %U %h %F	%N' $*")
			      (eshell/alias "psk" "ps -ely | grep $*")
			      (eshell/alias "r" "ranger")
			      (eshell/alias "raus" "lsblk -e7; udisksctl unmount --no-user-interaction --block-device $1")
			      (eshell/alias "rein" "lsblk -e7; udisksctl mount --no-user-interaction --block-device $1")
			      (eshell/alias "rm" "rm -rf $*")
			      (eshell/alias "rmdir" "rmdir --ignore-fail-on-non-empty -v $1")
			      (eshell/alias "rp" "rsync -vaHAX $*")
			      (eshell/alias "today" "touch $(date -I_)")
			      (eshell/alias "update" "sudo apt update && apt list --upgradable && sudo apt upgrade && sudo apt autoremove && sudo apt-get autoclean && flatpak update && flatpak uninstall --delete-data --unused && sudo youtube-dl --update")
			      (eshell/alias "v" "io.neovim.nvim $*")
			      (eshell/alias "workgit" "ssh-agent; pass -c ssh-keygen-github; ssh-add ~/.ssh/github")
			      (eshell/alias "x" "exit")

			      ;; deal with curses-like programs
			      (add-to-list 'eshell-visual-commands "emacs-nox")
			      (add-to-list 'eshell-visual-commands "io.neovim.nvim")
			      (add-to-list 'eshell-visual-commands "ranger")
			      (add-to-list 'eshell-visual-commands "ncdu")
			      (add-to-list 'eshell-visual-commands "top")
			      (add-to-list 'eshell-visual-commands "htop")
			      (add-to-list 'eshell-visual-commands "alsamixer")
			      (add-to-list 'eshell-visual-subcommands '("git" "log" "diff" "show"))
			      (add-to-list 'eshell-visual-subcommands '("pass" "edit"))
			      ))
#+END_SRC


*** outline for describe-bindings

#+begin_src emacs-lisp :tangle init.el
(setq describe-bindings-outline t)
#+end_src

*** highlight matches from e.g. occur

#+begin_src emacs-lisp :tangle init.el
(setq next-error-message-highlight t)
#+end_src

*** detailed completion suggestions

#+begin_src emacs-lisp :tangle init.el
(setq completions-detailed t)
#+end_src

*** right-click context menu

#+begin_src emacs-lisp :tangle init.el
(setq-default context-menu-mode t)
#+end_src

*** ediff

https://www.emacswiki.org/emacs/EdiffMode
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq ediff-window-setup-function 'ediff-setup-windows-plain
      ediff-split-window-function 'split-window-horizontally)
#+END_SRC

*** calendar

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq calendar-week-start-day 1
      calendar-mark-holidays-flag t
      ;; calendar-view-diary-initially-flag t
      calendar-date-style "iso"
      calendar-intermonth-text '(propertize
				 (format "%2d"
					 (car
					  (calendar-iso-from-absolute
					   (calendar-absolute-from-gregorian (list month day year)))))
				 'font-lock-face 'font-lock-function-name-face) ; see help on var calendar-intermonth-text
      )
;; (add-hook 'calendar-load-hook
;;           (lambda ()
;;             (setq mark-holidays-in-calendar t)))
#+END_SRC
https://github.com/rudolfochrist/german-holidays/blob/master/german-holidays.el

*** icomplete

#+BEGIN_SRC emacs-lisp :tangle init.el
(icomplete-mode)
(setq icomplete-compute-delay 0)
#+END_SRC

*** CamelCase - super- and subword movement

Display underscores in CamelCase without file modification:
#+begin_src emacs-lisp :tangle no
(setq-default glasses-mode nil)
#+end_src

superword-mode does the opposite:
#+begin_src emacs-lisp :tangle init.el
(setq-default subword-mode t)
#+end_src

*** recursive minibuffer

#+begin_src emacs-lisp :tangle init.el
(setq enable-recursive-minibuffers t)
(minibuffer-depth-indicate-mode)
#+end_src


** keybindings

*** better defaults

These bindings replace already-present ones with more useful
functionality:
#+BEGIN_SRC emacs-lisp :tangle init.el
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "C-s")     'isearch-forward-regexp)
(global-set-key (kbd "C-r")     'isearch-backward-regexp)
(global-set-key (kbd "M-%")     'replace-regexp)
(global-set-key (kbd "M-/")     'hippie-expand)
(global-set-key (kbd "M-o")     'other-window) ; https://www.masteringemacs.org/article/my-emacs-keybindings
(global-set-key (kbd "M-z")     'zap-up-to-char) ; maybe use cycle-spacing instead?

#+END_SRC

**** Scroll

Scroll half-pages instead of full ones:
#+BEGIN_SRC emacs-lisp :tangle init.el
(require 'view)
(global-set-key (kbd "C-v")   'View-scroll-half-page-forward)
(global-set-key (kbd "M-v")   'View-scroll-half-page-backward)
#+END_SRC
Taken from http://stackoverflow.com/a/19690877

Don‚Äôt move point when scrolling it out of the window:
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq scroll-preserve-screen-position 'always)
#+end_src
Taken from https://superuser.com/a/184421

**** Unfill

#+BEGIN_SRC emacs-lisp :tangle init.el
(defun endless/fill-or-unfill ()
  "Like ‚Äòfill-paragraph‚Äô, but unfill if used twice."
  (interactive)
  (let ((fill-column
	 (if (eq last-command 'endless/fill-or-unfill)
	     (progn (setq this-command nil)
		    (point-max))
	   fill-column)))
    (call-interactively #'fill-paragraph)))
(global-set-key [remap fill-paragraph]
		#'endless/fill-or-unfill)
(global-set-key [remap org-fill-paragraph]
		#'endless/fill-or-unfill)
#+END_SRC
Taken from http://endlessparentheses.com/fill-and-unfill-paragraphs-with-a-single-key.html


*** new additions

#+BEGIN_SRC emacs-lisp :tangle init.el
(global-set-key (kbd "<f1>")    'linum-mode)
(global-set-key (kbd "<f2>")    'toggle-truncate-lines)
(global-set-key (kbd "<f3>")    'browse-url-at-point)
;; (global-set-key (kbd "<f4>")    'string-rectangle) ; has standard binding: C-x r t
(global-set-key (kbd "<f5>")    'eval-buffer)
;; (global-set-key (kbd "<f6>")    'occur) ; has standard binding: M-s o
(global-set-key (kbd "<f7>")    're-builder)
(global-set-key (kbd "C-c t")   'eshell)
;;(define-key (current-global-map) [remap org-transpose-element] 'ansi-term)
(define-key dired-mode-map (kbd ";") 'ato-open-in-external-app)
(define-key dired-mode-map (kbd "\\") 'dired-do-async-shell-command)
(define-key dired-mode-map (kbd "C-c w") 'wdired-change-to-wdired-mode)
;;(global-set-key (kbd "C-x r") 'set-visited-file-name) ;shadows register commands (eg insert-register)
(define-key package-menu-mode-map (kbd "f") 'package-menu-filter-by-keyword) ; eg "status:installed"
#+END_SRC
https://www.masteringemacs.org/article/mastering-key-bindings-emacs

**** windmove

#+BEGIN_SRC emacs-lisp :tangle no
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))
(setq windmove-wrap-around t)
#+END_SRC

**** The Toggle-Map and Wizardry

#+begin_src emacs-lisp :tangle init.el
(define-prefix-command 'ato/toggle-map)
;; The manual recommends C-c for user keys, but C-x t is always free,
;; whereas C-c t is used by some modes.
(define-key  ctl-x-map "t" 'ato/toggle-map)
(define-key ato/toggle-map "c" #'column-number-mode)
(define-key ato/toggle-map "d" #'toggle-debug-on-error)
(define-key ato/toggle-map "e" #'electric-quote-mode)
(define-key ato/toggle-map "f" #'auto-fill-mode)
;; (define-key ato/toggle-map "l" #'toggle-truncate-lines)
(define-key ato/toggle-map "l" #'display-line-numbers-mode)
(define-key ato/toggle-map "q" #'toggle-debug-on-quit)
(define-key ato/toggle-map "t" #'ato/toggle-theme)
      ;;; Generalized version of 'read-only-mode'.
(define-key ato/toggle-map "r" #'dired-toggle-read-only)
(autoload 'dired-toggle-read-only "dired" nil t)
(define-key ato/toggle-map "w" #'whitespace-mode)
(define-key ato/toggle-map "g" #'glasses-mode)
(define-key ato/toggle-map "v" #'visible-mode)
(define-key ato/toggle-map "a" #'abbrev-mode)
#+end_src
Taken from https://endlessparentheses.com/the-toggle-map-and-wizardry.html

** programming languages

*** python

On Ubuntu, the [[https://stackoverflow.com/questions/17139067/how-do-i-change-the-default-command-for-run-python][default]] python is 2.
#+BEGIN_SRC emacs-lisp :tangle init.el
(cond ((eq system-type 'gnu/linux)
       (setq python-shell-interpreter "python3")
       ))
#+END_SRC


** session management

*** initial dired

Let my-projects-dired-symlink be the path to a directory containing
symlinks to projects:
#+NAME: start-with-dired
#+BEGIN_SRC emacs-lisp :tangle no
(desktop-save-mode t)
(setq desktop-save t
      desktop-dirname my-base-directory
      desktop-restore-frames nil ; don‚Äôt restore last layout, just keep the buffers
      ;; desktop-path (list desktop-dirname)
      )
(setq initial-buffer-choice (lambda ()
			      (eshell "~")
			      (split-window-vertically -10) ; can take arg for sizing, eg (split-window-vertically 50)
			      (dired (file-name-as-directory my-projects-dired-symlink))
			      )
      ;; or one of the following:
      ;; (getenv "HOME")
      ;; (eshell)
      ;; (expand-file-name (projects_dired_symlink))
      )
;; (toggle-frame-fullscreen)
(toggle-frame-maximized)
#+END_SRC

#+begin_src emacs-lisp :tangle init.el
(desktop-save-mode t)
(setq desktop-save t
      desktop-dirname my-base-directory
      )
#+end_src

*** desktop

http://stackoverflow.com/a/4485083
#+NAME: desktop-save
#+BEGIN_SRC emacs-lisp :tangle no
(desktop-save-mode t)
(setq desktop-save t
      desktop-dirname my-base-directory
      ;;desktop-path (list desktop-dirname)
      )
#+END_SRC

*** termwindow

#+name: termwindow
#+begin_src emacs-lisp :tangle no
(add-hook 'emacs-startup-hook (lambda ()
				(eshell)
				(split-window-vertically 30)
				;; (next-window)
				;; (switch-to-buffer "*eshell*")
				))
#+end_src

*** combined

#+BEGIN_SRC emacs-lisp :noweb yes :tangle no
(cond ((eq system-type 'gnu/linux)
       ;; <<desktop-save>>
       <<termwindow>>
       <<start-with-dired>>
       )
      ((eq system-type 'windows-nt)
       <<start-with-dired>>
       ))
#+END_SRC

*** minibuffer history

More Infos [[https://www.emacswiki.org/emacs/SaveHist][here]] and [[https://stackoverflow.com/questions/1229142/how-can-i-save-my-mini-buffer-history-in-emacs][here]] and [[https://emacs.stackexchange.com/questions/4187/strip-text-properties-in-savehist][here]].
#+BEGIN_SRC emacs-lisp :tangle init.el
(savehist-mode t)
#+END_SRC

*** clean old buffers

See also: midnight-mode
#+begin_src emacs-lisp :tangle init.el
(setq clean-buffer-list-kill-never-buffer-names '("*scratch*"
						  "*Messages*"
						  "info-ref.org"
						  "knowledgebase.org"
						  "emacs.org"
						  "agenda.org"
						  "0_date_topic_correspondent"
						  "work"
						  )
      clean-buffer-list-kill-regexps '("\\`\\*Man "
				       ".+"
				       )
      clean-buffer-list-delay-general 7
      )
;; (add-hook 'emacs-startup-hook (lambda ()
;; 				(clean-buffer-list)
;; 				))
#+end_src


** TODO profiling init

#+begin_src emacs-lisp :tangle init.el
;; Profile Emacs Startup
(add-hook 'emacs-startup-hook
	  (lambda ()
	    (message "*** Emacs loaded in %s with %d garbage collections."
		     (format "%.2f seconds"
			     (float-time
			      (time-subtract after-init-time before-init-time)))
		     gcs-done)))
#+end_src


** EOF init.el

#+begin_src emacs-lisp :tangle init.el
(message "[INFO] init.el loaded successfully")
#+end_src


* notes on other cool stuff

** dynamic libraries

As noted [[https://emacs.stackexchange.com/questions/27202/how-do-i-install-gnutls-for-emacs-25-1-on-windows][here]], the variable =dynamic-library-alist= is useful for
finding out which version of a library Emacs is expecting.

** ruler-mode

** scroll-lock-mode + view-mode

** speedbar

** type-break-mode

** hi-lock-mode

M-s h .

**  other links

http://nicolas.petton.fr/blog/per-computer-emacs-settings.html
http://nicolas.petton.fr/blog/blogging-with-org-mode.html
C-h a -mode$ RET
https://www.math.uh.edu/~bgb/emacs_keys.html

** truncate like nano

https://old.reddit.com/r/emacs/comments/6au45k/is_it_possible_to_truncate_long_lines_the_same/

or what about this?: Truncate all lines, except the one point is on,
which gets wrapped.
